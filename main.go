package main

import (
	"context"
	"errors"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gin-gonic/gin"
)

func main() {
	r := gin.New()

	r.Use(gin.Recovery())
	r.MaxMultipartMemory = 10 << 20 // 10MiB

	r.GET("/health", func(c *gin.Context) {
		c.String(http.StatusOK, http.StatusText(http.StatusOK))
	})
	r.HandleMethodNotAllowed = true
	srv := &http.Server{Addr: ":80", Handler: r}
	go func() {
		if err := srv.ListenAndServe(); err != nil && errors.Is(err, http.ErrServerClosed) {
			log.Default().Printf("HTTP Server error starting or closing listener: %s", err)
		}
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Default().Printf("HTTP Server forced to shutdown...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		log.Default().Println(err, "HTTP Server failed to shutdown")
	}

	log.Default().Println("HTTP Server exiting")
}
